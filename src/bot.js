import { Telegraf } from "telegraf";
import { parseCSV } from "./csvParser.js";
import { isAdminUser, updateProduct, bulkUpdatePrices, toggleProductVisibility, addAdmin, getAllProducts, resetProductsCache } from "./supabase.js";
import { logger } from "./utils.js";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
export const bot = new Telegraf(process.env.BOT_TOKEN);
const WEBAPP_URL = process.env.WEBAPP_URL || "https://lavandershopsite.onrender.com/webapp/index.html";

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const userId = ctx.from.id.toString();
  logger.info("Received /start command", { userId });

  let isAdmin = false;
  try {
    isAdmin = await isAdminUser(userId);
  } catch (err) {
    logger.error("Error checking admin status", { error: err.message, userId });
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ ID");
  }

  const buttons = [[{ text: "üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app: { url: WEBAPP_URL } }]];
  if (isAdmin) {
    buttons.push([{ text: "üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]);
  }

  await ctx.reply("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: { inline_keyboard: buttons },
  });
  logger.info("Sent /start response", { userId, isAdmin });
});

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
bot.action("admin_panel", async (ctx) => {
  const userId = ctx.from.id.toString();
  logger.info("Received admin_panel action", { userId });

  let isAdmin = false;
  try {
    isAdmin = await isAdminUser(userId);
  } catch (err) {
    logger.error("Error checking admin status in admin_panel", { error: err.message, userId });
    return ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }

  if (!isAdmin) {
    logger.warn("Admin access denied", { userId });
    return ctx.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω");
  }

  await ctx.reply("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üì¶ –ü–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤", callback_data: "parse_products" },
          { text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data: "edit_products" },
        ],
        [
          { text: "üëÅÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é", callback_data: "toggle_visibility" },
          { text: "üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data: "add_admin" },
        ],
        [
          { text: "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data: "view_products" },
          { text: "üí∞ –ú–∞—Å—Å–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞", callback_data: "bulk_price" },
        ],
      ],
    },
  });
  logger.info("Sent admin panel", { userId });
});

// –ü–∞—Ä—Å–µ—Ä CSV
bot.action("parse_products", async (ctx) => {
  await ctx.reply("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –ë–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Å—Ç–æ–ª–±—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, name, price, description).");
  logger.info("Prompted for CSV upload", { userId: ctx.from.id });
});

bot.on("document", async (ctx) => {
  const userId = ctx.from.id.toString();
  logger.info("Received document", { userId });

  let isAdmin = false;
  try {
    isAdmin = await isAdminUser(userId);
  } catch (err) {
    logger.error("Error checking admin status in document handler", { error: err.message, userId });
    return ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }

  if (!isAdmin) {
    logger.warn("Admin access denied for document upload", { userId });
    return;
  }

  try {
    const file = await ctx.telegram.getFile(ctx.message.document.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
    const newProducts = await parseCSV(fileUrl);
    
    if (newProducts.length === 0) {
      await ctx.reply("‚ö†Ô∏è CSV-—Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.");
      logger.warn("CSV file empty", { userId });
      return;
    }

    const { error } = await supabase.from("products").insert(newProducts);
    if (error) {
      logger.error("Supabase error inserting products", { error, userId });
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: " + error.message);
    } else {
      await resetProductsCache(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
      await ctx.reply(
        `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newProducts.length} —Ç–æ–≤–∞—Ä–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.`
      );
      logger.info("Products inserted", { userId, count: newProducts.length });
    }
  } catch (err) {
    logger.error("Error processing CSV", { error: err.message, userId });
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: " + err.message);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
bot.action("edit_products", async (ctx) => {
  await ctx.reply(
    "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ: edit,id,–Ω–∞–∑–≤–∞–Ω–∏–µ,—Ü–µ–Ω–∞,–æ–ø–∏—Å–∞–Ω–∏–µ,–∫–∞—Ç–µ–≥–æ—Ä–∏—è,–æ—Å—Ç–∞—Ç–æ–∫,—Ç–µ–≥–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)"
  );
});

bot.action("toggle_visibility", async (ctx) => {
  await ctx.reply("üëÅÔ∏è –í–≤–µ–¥–∏—Ç–µ: visibility,id,true/false (–Ω–∞–ø—Ä–∏–º–µ—Ä, visibility,12345,true)");
});

bot.action("bulk_price", async (ctx) => {
  await ctx.reply("üí∞ –í–≤–µ–¥–∏—Ç–µ: bulk,percent/fixed,–∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, bulk,percent,10)");
});

bot.action("view_products", async (ctx) => {
  const userId = ctx.from.id.toString();
  try {
    const products = await getAllProducts();
    if (!products || products.length === 0) {
      await ctx.reply("‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç");
      logger.info("No products found", { userId });
      return;
    }

    const productList = products
      .map(
        (p) =>
          `üìå ID: ${p.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name}\n–¶–µ–Ω–∞: ${p.price} ‚ÇΩ\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${p.category}\n–û—Å—Ç–∞—Ç–æ–∫: ${p.stock}\n–¢–µ–≥–∏: ${
            p.tags?.join(", ") || "–ù–µ—Ç —Ç–µ–≥–æ–≤"
          }\n–í–∏–¥–∏–º–æ—Å—Ç—å: ${p.is_visible ? "‚úÖ –í–∫–ª" : "‚ùå –í—ã–∫–ª"}`
      )
      .join("\n\n");

    await ctx.reply(productList);
    logger.info("Sent products list", { userId, count: products.length });
  } catch (err) {
    logger.error("Error in view_products", { error: err.message, userId });
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: " + err.message);
  }
});

bot.on("text", async (ctx) => {
  const userId = ctx.from.id.toString();
  const text = ctx.message.text;
  logger.info("Received text message", { userId, text });

  let isAdmin = false;
  try {
    isAdmin = await isAdminUser(userId);
  } catch (err) {
    logger.error("Error checking admin status in text handler", { error: err.message, userId });
    return ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }

  if (!isAdmin) {
    logger.warn("Admin access denied for text command", { userId });
    return;
  }

  try {
    if (text.startsWith("edit")) {
      const [, id, name, price, description, category, stock, tags] = text.split(",");
      const updatedProduct = {
        name,
        price: price && !isNaN(parseFloat(price)) ? parseFloat(price) : undefined,
        description,
        category,
        stock: stock && !isNaN(parseInt(stock)) ? parseInt(stock) : undefined,
        tags: tags ? tags.split(/[;,\s]+/).filter((tag) => tag) : undefined,
      };
      await updateProduct(id, updatedProduct);
      await ctx.reply("‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!");
      logger.info("Product updated", { userId, id });
    } else if (text.startsWith("bulk")) {
      const [, type, value] = text.split(",");
      const parsedValue = parseFloat(value);
      await bulkUpdatePrices(type, parsedValue);
      await ctx.reply("‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
      logger.info("Prices updated in bulk", { userId, type, value });
    } else if (text.startsWith("visibility")) {
      const [, id, state] = text.split(",");
      const isVisible = state.toLowerCase() === "true";
      await toggleProductVisibility(id, isVisible);
      await ctx.reply(`‚úÖ –í–∏–¥–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ ${id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ ${isVisible ? "–≤–∫–ª" : "–≤—ã–∫–ª"}`);
      logger.info("Visibility updated", { userId, id, isVisible });
    } else if (text.match(/^\d+$/)) {
      await addAdmin(text);
      await ctx.reply(`‚úÖ –ê–¥–º–∏–Ω —Å ID ${text} –¥–æ–±–∞–≤–ª–µ–Ω!`);
      logger.info("Admin added", { userId, newAdminId: text });
    }
  } catch (err) {
    logger.error("Error in text handler", { error: err.message, userId, text });
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: " + err.message);
  }
});